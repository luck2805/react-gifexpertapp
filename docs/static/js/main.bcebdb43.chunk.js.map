{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,SAOvC,2BACIC,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAdQ,kBAebA,GAfa,4CAAH,sDCCRS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCFHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OARAC,qBAAU,WACN1B,EAASC,GACR0B,MAAM,SAAAb,GAAM,OAAIW,EAAS,CACtBjB,KAAMM,EACNS,SAAS,SAEd,CAACtB,IAEGuB,EDX2BI,CAAa3B,GAAjCa,EAHuB,EAG7BN,KAAce,EAHe,EAGfA,QAEtB,OACI,oCACA,gCAAMtB,EAAN,KACEsB,GAAW,cACZ,yBAAKJ,UAAU,aACXL,EAAOJ,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEO9CmB,EAlBM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,gBAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACM6C,EAAWrB,KAAK,SAAAT,GAAQ,OAAI,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,UCVhF+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.bcebdb43.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories( cats => [inputValue, ...cats])\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}","\r\nexport const getGifts = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Kj3Yfj8JAI9vhmWHLVp1R9tMUau362lH`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    console.log(gifs)\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifts } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3> {category} </h3>\r\n        { loading && 'Cargando...' }\r\n         <div className=\"card-grid\">\r\n            {images.map(img => <GifGridItem key={img.id} {...img} />)}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifts } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    // Los efectos no pueden ser nunca asyncronos, por lo tanto no pueden manejar promesas (tiene que ser sincrono)\r\n    useEffect(() => {\r\n        getGifts(category)\r\n        .then( images => setState({\r\n            data: images,\r\n            loading: false\r\n        })) // es lo mismo a then( images => setImages ) \r\n    }, [category])\r\n\r\n    return state\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                { categories.map( category => <GifGrid key={category} category={category} />)}\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}